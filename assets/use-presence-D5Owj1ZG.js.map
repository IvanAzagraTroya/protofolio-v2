{"version":3,"file":"use-presence-D5Owj1ZG.js","sources":["../../node_modules/motion-utils/dist/es/is-object.mjs","../../node_modules/motion-dom/dist/es/utils/is-html-element.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs"],"sourcesContent":["function isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\n\nexport { isObject };\n","import { isObject } from 'motion-utils';\n\n/**\n * Checks if an element is an HTML element in a way\n * that works across iframes\n */\nfunction isHTMLElement(element) {\n    return isObject(element) && \"offsetHeight\" in element;\n}\n\nexport { isHTMLElement };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n"],"names":["isObject","value","isHTMLElement","element","usePresence","subscribe","context","useContext","PresenceContext","isPresent","onExitComplete","register","id","useId","useEffect","safeToRemove","useCallback","useIsPresent"],"mappings":"+CAAA,SAASA,EAASC,EAAO,CACrB,OAAO,OAAOA,GAAU,UAAYA,IAAU,IAClD,CCIA,SAASC,EAAcC,EAAS,CAC5B,OAAOH,EAASG,CAAO,GAAK,iBAAkBA,CAClD,CCkBA,SAASC,EAAYC,EAAY,GAAM,CACnC,MAAMC,EAAUC,EAAU,WAACC,CAAe,EAC1C,GAAIF,IAAY,KACZ,MAAO,CAAC,GAAM,IAAI,EACtB,KAAM,CAAE,UAAAG,EAAW,eAAAC,EAAgB,SAAAC,CAAU,EAAGL,EAG1CM,EAAKC,EAAAA,MAAO,EAClBC,EAAAA,UAAU,IAAM,CACZ,GAAIT,EACA,OAAOM,EAASC,CAAE,CAE9B,EAAO,CAACP,CAAS,CAAC,EACd,MAAMU,EAAeC,EAAAA,YAAY,IAAMX,GAAaK,GAAkBA,EAAeE,CAAE,EAAG,CAACA,EAAIF,EAAgBL,CAAS,CAAC,EACzH,MAAO,CAACI,GAAaC,EAAiB,CAAC,GAAOK,CAAY,EAAI,CAAC,EAAI,CACvE,CAqBA,SAASE,GAAe,CACpB,OAAOR,EAAUF,aAAWC,CAAe,CAAC,CAChD,CACA,SAASC,EAAUH,EAAS,CACxB,OAAOA,IAAY,KAAO,GAAOA,EAAQ,SAC7C","x_google_ignoreList":[0,1,2]}